{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Twilio Microphone Test App","text":"<p>A simple Golang application that uses Twilio to let callers record and immediately play back audio for microphone testing purposes.</p>"},{"location":"#overview","title":"Overview","text":"<p>This application provides a VoIP service that allows callers to:</p> <ol> <li>Call a Twilio phone number</li> <li>Record a short audio message</li> <li>Hear the recording played back immediately</li> <li>Repeat the process as many times as needed</li> </ol> <p>This is particularly useful for testing microphone quality and audio settings during VoIP calls.</p>"},{"location":"#how-it-works","title":"How It Works","text":"<p>When a caller dials your Twilio phone number:</p> <ol> <li>The caller hears a welcome message and instructions</li> <li>After a beep, the caller can speak to test their microphone</li> <li>The caller presses <code>#</code> to end the recording</li> <li>The system plays back the recording</li> <li>The caller can press <code>1</code> to record again or hang up to end the call</li> </ol>"},{"location":"#features","title":"Features","text":"<ul> <li>Simple Interface: Clear voice prompts guide callers through the testing process</li> <li>Immediate Feedback: Recordings are played back immediately after completion</li> <li>Repeat Testing: Callers can make multiple recordings in a single call</li> <li>Silent Trimming: Automatically removes silence from the beginning and end of recordings</li> <li>Configurable: Easy to customize recording length and other parameters</li> </ul>"},{"location":"#technology-stack","title":"Technology Stack","text":"<ul> <li>Backend: Golang with Gin web framework</li> <li>Voice Services: Twilio Voice API</li> <li>Deployment: Docker containerization for Azure Web App</li> <li>CI/CD: GitHub Actions workflow for automated deployment</li> <li>Documentation: MkDocs with Material theme</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>See the Installation and Configuration guides to get started.</p>"},{"location":"api-reference/","title":"API Reference","text":"<p>This document provides details about the API endpoints exposed by the Twilio Microphone Test App and the TwiML responses they generate.</p>"},{"location":"api-reference/#endpoints","title":"Endpoints","text":"<p>The application exposes four main endpoints that handle different stages of the call flow:</p>"},{"location":"api-reference/#post-voice","title":"POST /voice","text":"<p>Handles incoming first-time calls with detailed instructions.</p> <p>Request: - Method: <code>POST</code> - Content-Type: <code>application/x-www-form-urlencoded</code> - Body: Twilio's standard voice webhook parameters</p> <p>Response: - Content-Type: <code>text/xml</code> - Body: TwiML that gives detailed instructions and starts recording</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;Response&gt;\n    &lt;Say&gt;Welcome to the microphone test service. This tool will help you test your microphone quality. After the beep, please speak normally to test your microphone. When you're finished recording, press the pound key. You'll then hear your recording played back, allowing you to evaluate your microphone's sound quality.&lt;/Say&gt;\n    &lt;Record\n        action=\"/record\"\n        maxLength=\"30\"\n        finishOnKey=\"#\"\n        playBeep=\"true\"\n        trim=\"trim-silence\"\n    /&gt;\n&lt;/Response&gt;\n</code></pre>"},{"location":"api-reference/#post-voicerepeat","title":"POST /voice/repeat","text":"<p>Handles subsequent recording requests with briefer instructions.</p> <p>Request: - Method: <code>POST</code> - Content-Type: <code>application/x-www-form-urlencoded</code> - Body: Twilio's standard voice webhook parameters</p> <p>Response: - Content-Type: <code>text/xml</code> - Body: TwiML that gives brief instructions and starts recording</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;Response&gt;\n    &lt;Say&gt;Speak after the beep. Press pound when done.&lt;/Say&gt;\n    &lt;Record\n        action=\"/record\"\n        maxLength=\"30\"\n        finishOnKey=\"#\"\n        playBeep=\"true\"\n        trim=\"trim-silence\"\n    /&gt;\n&lt;/Response&gt;\n</code></pre> <p>TwiML Elements Used for /voice and /voice/repeat: - <code>&lt;Say&gt;</code>: Converts text to speech to play to the caller - <code>&lt;Record&gt;</code>: Records the caller's voice and sends it to the specified action URL</p>"},{"location":"api-reference/#post-record","title":"POST /record","text":"<p>Receives the recording data and plays it back to the caller.</p> <p>Request: - Method: <code>POST</code> - Content-Type: <code>application/x-www-form-urlencoded</code> - Body: Twilio's standard recording webhook parameters   - <code>RecordingUrl</code>: URL of the recording   - <code>RecordingDuration</code>: Duration of the recording in seconds   - Other standard parameters</p> <p>Response: - Content-Type: <code>text/xml</code> - Body: TwiML that plays back the recording and offers to record again</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;Response&gt;\n    &lt;Say&gt;Here is your recording:&lt;/Say&gt;\n    &lt;Play&gt;https://api.twilio.com/2010-04-01/Accounts/ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX/Recordings/REXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX&lt;/Play&gt;\n    &lt;Gather numDigits=\"1\" action=\"/playback\" method=\"POST\"&gt;\n        &lt;Say&gt;Press 1 to record again, or hang up to end the call.&lt;/Say&gt;\n    &lt;/Gather&gt;\n    &lt;Say&gt;Thank you for using the microphone test service. Goodbye.&lt;/Say&gt;\n&lt;/Response&gt;\n</code></pre> <p>TwiML Elements Used: - <code>&lt;Say&gt;</code>: Converts text to speech to play to the caller - <code>&lt;Play&gt;</code>: Plays an audio file to the caller - <code>&lt;Gather&gt;</code>: Collects digits pressed by the caller</p> <p>Alternative Response (if no recording was made): <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;Response&gt;\n    &lt;Say&gt;No recording was detected. Let's try again.&lt;/Say&gt;\n    &lt;Redirect&gt;/voice/repeat&lt;/Redirect&gt;\n&lt;/Response&gt;\n</code></pre></p> <p>Additional TwiML Elements Used: - <code>&lt;Redirect&gt;</code>: Redirects to another TwiML URL</p>"},{"location":"api-reference/#post-playback","title":"POST /playback","text":"<p>Processes the caller's choice after playback (record again or end the call).</p> <p>Request: - Method: <code>POST</code> - Content-Type: <code>application/x-www-form-urlencoded</code> - Body: Twilio's standard gather webhook parameters   - <code>Digits</code>: The digits pressed by the caller (we expect <code>1</code> to record again)</p> <p>Response (if <code>Digits</code> is <code>1</code>): - Content-Type: <code>text/xml</code> - Body: TwiML that redirects to the <code>/voice/repeat</code> endpoint to start another recording with brief instructions</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;Response&gt;\n    &lt;Redirect&gt;/voice/repeat&lt;/Redirect&gt;\n&lt;/Response&gt;\n</code></pre> <p>Response (for any other value or no input): - Content-Type: <code>text/xml</code> - Body: TwiML that ends the call with a goodbye message</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;Response&gt;\n    &lt;Say&gt;Thank you for using the microphone test service. Goodbye.&lt;/Say&gt;\n&lt;/Response&gt;\n</code></pre>"},{"location":"api-reference/#twiml-quick-reference","title":"TwiML Quick Reference","text":"<p>The application uses the following TwiML elements:</p> Element Description Documentation <code>&lt;Response&gt;</code> Root element for all TwiML responses Docs <code>&lt;Say&gt;</code> Converts text to speech Docs <code>&lt;Record&gt;</code> Records caller's voice Docs <code>&lt;Play&gt;</code> Plays an audio file Docs <code>&lt;Gather&gt;</code> Collects caller's input Docs <code>&lt;Redirect&gt;</code> Redirects to another endpoint Docs"},{"location":"api-reference/#adding-custom-endpoints","title":"Adding Custom Endpoints","text":"<p>If you want to extend the application with additional functionality, you can add new endpoints in <code>main.go</code>:</p> <pre><code>// Example of adding a new endpoint for call statistics\nrouter.GET(\"/stats\", handleCallStats)\n\n// Implementation\nfunc handleCallStats(c *gin.Context) {\n    // Your code here to retrieve and return call statistics\n    c.JSON(http.StatusOK, gin.H{\n        \"total_calls\": 100,\n        \"total_recordings\": 250,\n        \"average_duration\": 15.5,\n    })\n}\n</code></pre>"},{"location":"api-reference/#webhook-verification","title":"Webhook Verification","text":"<p>For production deployments, it's recommended to verify that incoming requests are actually from Twilio. You can implement this by adding middleware to validate the request signature:</p> <pre><code>// Simplified example of Twilio signature validation middleware\nfunc twilioAuthMiddleware() gin.HandlerFunc {\n    return func(c *gin.Context) {\n        // Get Twilio signature from header\n        twilioSignature := c.GetHeader(\"X-Twilio-Signature\")\n\n        // Get request URL and form values\n        url := \"https://\" + c.Request.Host + c.Request.URL.Path\n\n        // Validate the signature (simplified example)\n        if !validateTwilioSignature(twilioSignature, url, c.Request.Form, os.Getenv(\"TWILIO_AUTH_TOKEN\")) {\n            c.AbortWithStatus(403)\n            return\n        }\n\n        c.Next()\n    }\n}\n</code></pre> <p>See Twilio's Security documentation for more details on webhook validation.</p>"},{"location":"twilio-setup/","title":"Twilio Setup Guide","text":"<p>This guide walks you through setting up your Twilio account and configuring it to work with the Microphone Test App.</p>"},{"location":"twilio-setup/#prerequisites","title":"Prerequisites","text":"<ul> <li>A Twilio account (you can sign up for a free trial at twilio.com)</li> <li>Your application deployed and accessible via a public URL</li> </ul>"},{"location":"twilio-setup/#step-1-create-a-twilio-account","title":"Step 1: Create a Twilio Account","text":"<ol> <li>Go to twilio.com and sign up for an account if you don't already have one</li> <li>Verify your email address and phone number</li> <li>Note your Account SID and Auth Token from the Twilio Console dashboard - you'll need these for your app configuration</li> </ol>"},{"location":"twilio-setup/#step-2-get-a-twilio-phone-number","title":"Step 2: Get a Twilio Phone Number","text":"<ol> <li>In the Twilio Console, navigate to Phone Numbers &gt; Manage &gt; Buy a Number</li> <li>Search for a phone number with voice capabilities</li> <li>Purchase a phone number that suits your needs</li> <li>Note down this phone number for your app configuration</li> </ol>"},{"location":"twilio-setup/#step-3-configure-your-twilio-phone-number","title":"Step 3: Configure Your Twilio Phone Number","text":"<ol> <li>In the Twilio Console, go to Phone Numbers &gt; Manage &gt; Active Numbers</li> <li>Click on the phone number you purchased</li> <li>Under the Voice &amp; Fax section, find the A Call Comes In setting</li> <li>Select Webhook from the dropdown menu</li> <li>In the URL field, enter your application's voice endpoint: <code>https://your-app-url.com/voice</code></li> <li>Make sure the HTTP method is set to POST</li> <li>Click Save at the bottom of the page</li> </ol>"},{"location":"twilio-setup/#step-4-configure-your-application","title":"Step 4: Configure Your Application","text":"<ol> <li> <p>Update your application's <code>.env</code> file with your Twilio credentials:    <pre><code>TWILIO_ACCOUNT_SID=your_account_sid_here\nTWILIO_AUTH_TOKEN=your_auth_token_here\nTWILIO_PHONE_NUMBER=your_twilio_phone_number_here\n</code></pre></p> </li> <li> <p>Restart your application to apply the changes</p> </li> </ol>"},{"location":"twilio-setup/#step-5-testing-your-setup","title":"Step 5: Testing Your Setup","text":"<ol> <li>Call your Twilio phone number from any phone</li> <li>You should hear the welcome message asking you to record after the beep</li> <li>Record a short message and press <code>#</code></li> <li>You should hear your recording played back</li> <li>You can press <code>1</code> to record again or hang up</li> </ol>"},{"location":"twilio-setup/#troubleshooting","title":"Troubleshooting","text":"<p>If your application isn't receiving calls properly:</p> <ol> <li>Check your webhooks: In the Twilio Console, go to Monitor &gt; Logs &gt; Debugger to see if there are any errors when Twilio tries to connect to your webhook</li> <li>Verify your URL: Make sure your application is publicly accessible at the URL you configured</li> <li>Check your application logs: Look for any errors in your application logs that might indicate issues processing Twilio requests</li> <li>Test your endpoints: Use a tool like Postman to send test POST requests to your <code>/voice</code> endpoint to verify it's responding correctly</li> </ol>"},{"location":"twilio-setup/#next-steps","title":"Next Steps","text":"<ul> <li>Consider setting up TwiML Bins for quick testing</li> <li>Explore Twilio's Voice API documentation for more advanced features</li> <li>Set up call recording storage if you want to save recordings for later analysis</li> </ul>"},{"location":"deployment/azure/","title":"Deploying to Azure","text":"<p>This guide walks you through deploying the Twilio Microphone Test App to Azure using GitHub Actions and Azure Web App.</p>"},{"location":"deployment/azure/#prerequisites","title":"Prerequisites","text":"<p>Before proceeding, ensure you have:</p> <ul> <li>An Azure account (you can create one for free)</li> <li>A GitHub account with your code repository</li> <li>The following resources created in Azure:</li> <li>Resource Group</li> <li>Azure Container Registry (ACR)</li> <li>Azure Web App (configured for containers)</li> </ul>"},{"location":"deployment/azure/#setting-up-azure-resources","title":"Setting Up Azure Resources","text":""},{"location":"deployment/azure/#1-create-a-resource-group","title":"1. Create a Resource Group","text":"<pre><code>az group create --name twilio-mic-test-rg --location eastus\n</code></pre>"},{"location":"deployment/azure/#2-create-an-azure-container-registry","title":"2. Create an Azure Container Registry","text":"<pre><code>az acr create --resource-group twilio-mic-test-rg --name twilioregistry --sku Basic\n</code></pre>"},{"location":"deployment/azure/#3-enable-admin-access-to-acr","title":"3. Enable Admin Access to ACR","text":"<pre><code>az acr update --name twilioregistry --admin-enabled true\n</code></pre>"},{"location":"deployment/azure/#4-get-acr-credentials","title":"4. Get ACR Credentials","text":"<pre><code>az acr credential show --name twilioregistry\n</code></pre> <p>Note down the username and passwords from the output.</p>"},{"location":"deployment/azure/#5-create-an-azure-web-app","title":"5. Create an Azure Web App","text":"<pre><code>az appservice plan create --name twilio-mic-test-plan --resource-group twilio-mic-test-rg --sku B1 --is-linux\naz webapp create --resource-group twilio-mic-test-rg --plan twilio-mic-test-plan --name twilio-mic-test-app --deployment-container-image-name twilioregistry.azurecr.io/twilio-mic-test:latest\n</code></pre>"},{"location":"deployment/azure/#6-configure-environment-variables-for-the-web-app","title":"6. Configure Environment Variables for the Web App","text":"<pre><code>az webapp config appsettings set --resource-group twilio-mic-test-rg --name twilio-mic-test-app --settings TWILIO_ACCOUNT_SID=your_account_sid TWILIO_AUTH_TOKEN=your_auth_token TWILIO_PHONE_NUMBER=your_twilio_phone_number APP_ENV=production\n</code></pre>"},{"location":"deployment/azure/#setting-up-github-actions","title":"Setting Up GitHub Actions","text":"<p>To automate deployment using GitHub Actions, you need to add secrets to your GitHub repository.</p>"},{"location":"deployment/azure/#1-get-azure-credentials-for-github-actions","title":"1. Get Azure Credentials for GitHub Actions","text":"<pre><code>az ad sp create-for-rbac --name \"twilio-mic-test-ci\" --role contributor \\\n  --scopes /subscriptions/{subscription-id}/resourceGroups/twilio-mic-test-rg \\\n  --sdk-auth\n</code></pre> <p>This will output a JSON object containing credentials.</p>"},{"location":"deployment/azure/#2-add-github-secrets","title":"2. Add GitHub Secrets","text":"<p>In your GitHub repository, go to Settings &gt; Secrets and variables &gt; Actions and add the following secrets:</p> <ul> <li><code>AZURE_CREDENTIALS</code>: The entire JSON output from the previous step</li> <li><code>AZURE_REGISTRY_URL</code>: Your ACR login server (e.g., <code>twilioregistry.azurecr.io</code>)</li> <li><code>AZURE_REGISTRY_USERNAME</code>: ACR username</li> <li><code>AZURE_REGISTRY_PASSWORD</code>: ACR password</li> <li><code>AZURE_WEBAPP_NAME</code>: Web App name (e.g., <code>twilio-mic-test-app</code>)</li> </ul>"},{"location":"deployment/azure/#3-configure-workflow-file","title":"3. Configure Workflow File","text":"<p>The <code>.github/workflows/deploy.yml</code> file in your repository should already be configured correctly, but verify it contains:</p> <pre><code>name: Deploy to Azure\n\non:\n  push:\n    branches: [ main ]\n  workflow_dispatch:\n\njobs:\n  build-and-deploy:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    - name: Set up Docker Buildx\n      uses: docker/setup-buildx-action@v2\n\n    - name: Login to Azure Container Registry\n      uses: docker/login-action@v2\n      with:\n        registry: ${{ secrets.AZURE_REGISTRY_URL }}\n        username: ${{ secrets.AZURE_REGISTRY_USERNAME }}\n        password: ${{ secrets.AZURE_REGISTRY_PASSWORD }}\n\n    - name: Build and push Docker image\n      uses: docker/build-push-action@v4\n      with:\n        context: .\n        push: true\n        tags: ${{ secrets.AZURE_REGISTRY_URL }}/twilio-mic-test:${{ github.sha }}, ${{ secrets.AZURE_REGISTRY_URL }}/twilio-mic-test:latest\n\n    - name: Login to Azure\n      uses: azure/login@v1\n      with:\n        creds: ${{ secrets.AZURE_CREDENTIALS }}\n\n    - name: Deploy to Azure Web App\n      uses: azure/webapps-deploy@v2\n      with:\n        app-name: ${{ secrets.AZURE_WEBAPP_NAME }}\n        images: ${{ secrets.AZURE_REGISTRY_URL }}/twilio-mic-test:${{ github.sha }}\n\n    - name: Deploy to GitHub Pages (Documentation)\n      uses: mhausenblas/mkdocs-deploy-gh-pages@master\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        CONFIG_FILE: mkdocs.yml\n</code></pre>"},{"location":"deployment/azure/#triggering-deployment","title":"Triggering Deployment","text":"<p>Push to the main branch of your repository to trigger the GitHub Actions workflow:</p> <pre><code>git add .\ngit commit -m \"Update application for Azure deployment\"\ngit push origin main\n</code></pre> <p>The workflow will: 1. Build your Docker image 2. Push it to Azure Container Registry 3. Deploy it to your Azure Web App 4. Deploy your documentation to GitHub Pages</p>"},{"location":"deployment/azure/#configuring-twilio","title":"Configuring Twilio","text":"<p>After deployment, update your Twilio webhook URL to point to your Azure Web App:</p> <pre><code>https://twilio-mic-test-app.azurewebsites.net/voice\n</code></pre> <p>Follow the Twilio Setup Guide for detailed instructions.</p>"},{"location":"deployment/azure/#monitoring","title":"Monitoring","text":"<p>You can monitor your application using Azure's built-in tools:</p> <ul> <li>Logs: Check application logs in the Azure portal under your Web App &gt; Monitoring &gt; Log stream</li> <li>Metrics: View performance metrics under your Web App &gt; Monitoring &gt; Metrics</li> <li>Alerts: Set up alerts for important events under your Web App &gt; Monitoring &gt; Alerts</li> </ul>"},{"location":"deployment/azure/#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter issues with your deployment:</p> <ol> <li>Check GitHub Actions workflow runs for error messages</li> <li>Verify that all secrets are correctly set in GitHub</li> <li>Check the application logs in Azure</li> <li>Ensure your Web App is properly configured for containers</li> <li>Verify that Twilio can reach your Web App by checking the Twilio console logs</li> </ol>"},{"location":"deployment/azure/#cost-management","title":"Cost Management","text":"<p>The configuration described here uses: - Azure Web App (Basic B1 tier): ~$13/month - Azure Container Registry (Basic tier): ~$5/month</p> <p>To reduce costs, you could: - Use a Free or Shared tier App Service Plan for non-production workloads - Delete resources when not in use</p>"},{"location":"deployment/other-options/","title":"Alternative Deployment Options","text":"<p>While Azure Web App is the primary deployment target for this application, there are several other cost-effective and simpler alternatives that may be more appropriate depending on your needs.</p>"},{"location":"deployment/other-options/#heroku","title":"Heroku","text":"<p>Heroku offers a simple deployment experience with a free tier available.</p>"},{"location":"deployment/other-options/#setting-up-heroku","title":"Setting Up Heroku","text":"<ol> <li>Install the Heroku CLI</li> <li>Create a new Heroku app:</li> </ol> <pre><code>heroku login\nheroku create your-app-name\n</code></pre> <ol> <li>Add a <code>Procfile</code> to your repository:</li> </ol> <pre><code>web: ./app\n</code></pre> <ol> <li>Configure environment variables:</li> </ol> <pre><code>heroku config:set TWILIO_ACCOUNT_SID=your_account_sid\nheroku config:set TWILIO_AUTH_TOKEN=your_auth_token\nheroku config:set TWILIO_PHONE_NUMBER=your_twilio_phone_number\nheroku config:set APP_ENV=production\n</code></pre> <ol> <li>Deploy using Git:</li> </ol> <pre><code>git push heroku main\n</code></pre>"},{"location":"deployment/other-options/#github-actions-for-heroku","title":"GitHub Actions for Heroku","text":"<p>You can also set up automatic deployment to Heroku with GitHub Actions:</p> <pre><code>name: Deploy to Heroku\n\non:\n  push:\n    branches: [ main ]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: akhileshns/heroku-deploy@v3.12.14\n        with:\n          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}\n          heroku_app_name: \"your-app-name\"\n          heroku_email: \"your-email@example.com\"\n</code></pre>"},{"location":"deployment/other-options/#pricing","title":"Pricing","text":"<ul> <li>Free Plan: 0-1000 dyno hours per month (sufficient for small projects)</li> <li>Hobby Plan: $7/month for a single dyno</li> </ul>"},{"location":"deployment/other-options/#railway","title":"Railway","text":"<p>Railway is a modern platform that makes deployment very straightforward.</p>"},{"location":"deployment/other-options/#setting-up-railway","title":"Setting Up Railway","text":"<ol> <li>Create an account on Railway</li> <li>Connect your GitHub repository</li> <li>Configure the build settings:</li> <li>Build Command: <code>go build -o app</code></li> <li>Start Command: <code>./app</code></li> <li>Add environment variables in the Railway dashboard</li> </ol>"},{"location":"deployment/other-options/#pricing_1","title":"Pricing","text":"<ul> <li>Free Trial: $5 credit that expires after 14 days</li> <li>Developer Plan: $5/month + usage (typically $10-15 total for small apps)</li> </ul>"},{"location":"deployment/other-options/#flyio","title":"Fly.io","text":"<p>Fly.io allows you to deploy applications globally with minimal configuration.</p>"},{"location":"deployment/other-options/#setting-up-flyio","title":"Setting Up Fly.io","text":"<ol> <li>Install the Fly CLI:</li> </ol> <pre><code>curl -L https://fly.io/install.sh | sh\n</code></pre> <ol> <li>Authenticate and create an app:</li> </ol> <pre><code>fly auth login\nfly launch\n</code></pre> <ol> <li> <p>This will generate a <code>fly.toml</code> file. You can customize it as needed.</p> </li> <li> <p>Deploy your app:</p> </li> </ol> <pre><code>fly deploy\n</code></pre>"},{"location":"deployment/other-options/#pricing_2","title":"Pricing","text":"<ul> <li>Free Plan: 3 shared-cpu-1x 256mb VMs and 3GB persistent volume storage</li> <li>Paid Plans: Starting at ~$1.94/month for small apps</li> </ul>"},{"location":"deployment/other-options/#google-cloud-run","title":"Google Cloud Run","text":"<p>Google Cloud Run is a serverless platform that's well-suited for containerized applications.</p>"},{"location":"deployment/other-options/#setting-up-cloud-run","title":"Setting Up Cloud Run","text":"<ol> <li>Install the Google Cloud SDK</li> <li>Authenticate and set up your project:</li> </ol> <pre><code>gcloud auth login\ngcloud config set project your-project-id\n</code></pre> <ol> <li>Build and push your Docker image:</li> </ol> <pre><code>gcloud builds submit --tag gcr.io/your-project-id/twilio-mic-test\n</code></pre> <ol> <li>Deploy to Cloud Run:</li> </ol> <pre><code>gcloud run deploy twilio-mic-test \\\n  --image gcr.io/your-project-id/twilio-mic-test \\\n  --platform managed \\\n  --allow-unauthenticated \\\n  --set-env-vars=\"TWILIO_ACCOUNT_SID=your_account_sid,TWILIO_AUTH_TOKEN=your_auth_token,TWILIO_PHONE_NUMBER=your_twilio_phone_number,APP_ENV=production\"\n</code></pre>"},{"location":"deployment/other-options/#github-actions-for-cloud-run","title":"GitHub Actions for Cloud Run","text":"<pre><code>name: Deploy to Cloud Run\n\non:\n  push:\n    branches: [ main ]\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Set up Cloud SDK\n        uses: google-github-actions/setup-gcloud@v0\n        with:\n          project_id: ${{ secrets.GCP_PROJECT_ID }}\n          service_account_key: ${{ secrets.GCP_SA_KEY }}\n\n      - name: Build and push Docker image\n        run: |\n          gcloud builds submit --tag gcr.io/${{ secrets.GCP_PROJECT_ID }}/twilio-mic-test\n\n      - name: Deploy to Cloud Run\n        run: |\n          gcloud run deploy twilio-mic-test \\\n            --image gcr.io/${{ secrets.GCP_PROJECT_ID }}/twilio-mic-test \\\n            --platform managed \\\n            --allow-unauthenticated \\\n            --set-env-vars=\"TWILIO_ACCOUNT_SID=${{ secrets.TWILIO_ACCOUNT_SID }},TWILIO_AUTH_TOKEN=${{ secrets.TWILIO_AUTH_TOKEN }},TWILIO_PHONE_NUMBER=${{ secrets.TWILIO_PHONE_NUMBER }},APP_ENV=production\"\n</code></pre>"},{"location":"deployment/other-options/#pricing_3","title":"Pricing","text":"<ul> <li>Free Tier: 2 million requests per month, 360,000 GB-seconds of compute time</li> <li>Pay as you go: Only pay for what you use (often &lt;$5/month for small apps)</li> </ul>"},{"location":"deployment/other-options/#digitalocean-app-platform","title":"DigitalOcean App Platform","text":"<p>DigitalOcean App Platform offers a simple PaaS experience.</p>"},{"location":"deployment/other-options/#setting-up-digitalocean-app-platform","title":"Setting Up DigitalOcean App Platform","text":"<ol> <li>Create a DigitalOcean account</li> <li>In the control panel, go to Apps &gt; Create App</li> <li>Connect your GitHub repository</li> <li>Configure your app:</li> <li>Type: Web Service</li> <li>Source Directory: <code>/</code></li> <li>Build Command: <code>go build -o app</code></li> <li>Run Command: <code>./app</code></li> <li>Add environment variables</li> <li>Deploy the app</li> </ol>"},{"location":"deployment/other-options/#pricing_4","title":"Pricing","text":"<ul> <li>Basic Plan: Starting at $5/month</li> <li>Professional Plan: Starting at $12/month with additional features</li> </ul>"},{"location":"deployment/other-options/#comparison-table","title":"Comparison Table","text":"Platform Pros Cons Free Tier? Starting Price Azure Web App Enterprise-grade, good integration with other Azure services More complex setup, higher cost Limited ~$13/month Heroku Very simple deployment, good for beginners More expensive at scale Yes Free-$7/month Railway Modern UI, simple setup Limited free tier Trial only ~$10/month Fly.io Global deployment, simple CLI Newer platform Yes Free-$2/month Google Cloud Run Serverless, only pay for what you use More complex setup Yes Pay-as-you-go DigitalOcean Simple interface, predictable pricing Fewer features than some alternatives No $5/month"},{"location":"deployment/other-options/#recommendation","title":"Recommendation","text":"<p>For this specific application:</p> <ul> <li>Lowest Cost: Fly.io or Google Cloud Run</li> <li>Simplest Setup: Heroku or Railway</li> <li>Best Performance: Google Cloud Run or Azure Web App</li> <li>Best for Learning: Heroku (detailed documentation and tutorials)</li> </ul>"},{"location":"deployment/other-options/#switching-between-platforms","title":"Switching Between Platforms","text":"<p>If you decide to switch platforms, the application is designed to be portable:</p> <ol> <li>The use of environment variables means configuration is consistent across platforms</li> <li>The Docker container ensures the application runs the same everywhere</li> <li>The GitHub Actions workflows can be adapted for different deployment targets</li> </ol>"},{"location":"getting-started/configuration/","title":"Configuration","text":"<p>This guide explains the configuration options available for the Twilio Microphone Test App.</p>"},{"location":"getting-started/configuration/#environment-variables","title":"Environment Variables","text":"<p>The application uses environment variables for configuration. These can be set directly in your environment or through a <code>.env</code> file (recommended for development).</p>"},{"location":"getting-started/configuration/#required-variables","title":"Required Variables","text":"Variable Description Example <code>TWILIO_ACCOUNT_SID</code> Your Twilio account SID <code>ACxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</code> <code>TWILIO_AUTH_TOKEN</code> Your Twilio auth token <code>xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</code> <code>TWILIO_PHONE_NUMBER</code> Your Twilio phone number <code>+1234567890</code>"},{"location":"getting-started/configuration/#optional-variables","title":"Optional Variables","text":"Variable Description Default Example <code>PORT</code> The port on which the server will listen <code>8080</code> <code>3000</code> <code>APP_ENV</code> The application environment <code>development</code> <code>production</code>"},{"location":"getting-started/configuration/#twiml-customization","title":"TwiML Customization","text":"<p>The application uses TwiML (Twilio Markup Language) to control call flow. You can customize various aspects of the call experience by modifying the TwiML responses in <code>main.go</code>.</p>"},{"location":"getting-started/configuration/#recording-settings","title":"Recording Settings","text":"<p>In the <code>handleIncomingCall</code> function, you can adjust the <code>&lt;Record&gt;</code> element's attributes:</p> <pre><code>&lt;Record\n    action=\"/record\"\n    maxLength=\"30\"\n    finishOnKey=\"#\"\n    playBeep=\"true\"\n    trim=\"trim-silence\"\n/&gt;\n</code></pre> Attribute Description Default <code>maxLength</code> Maximum recording duration in seconds <code>30</code> <code>finishOnKey</code> Key to press to end recording <code>#</code> <code>playBeep</code> Whether to play a beep before recording <code>true</code> <code>trim</code> Whether to trim silence from recordings <code>trim-silence</code>"},{"location":"getting-started/configuration/#voice-prompts","title":"Voice Prompts","text":"<p>You can customize the voice prompts by modifying the text within the <code>&lt;Say&gt;</code> elements:</p> <pre><code>const twiml = `&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;Response&gt;\n    &lt;Say&gt;Welcome to the microphone test service. After the beep, please speak to test your microphone. When finished, press the pound key.&lt;/Say&gt;\n    &lt;!-- ... --&gt;\n&lt;/Response&gt;`\n</code></pre>"},{"location":"getting-started/configuration/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"getting-started/configuration/#voice-settings","title":"Voice Settings","text":"<p>To change the voice used for prompts, add a <code>voice</code> attribute to the <code>&lt;Say&gt;</code> elements:</p> <pre><code>&lt;Say voice=\"woman\"&gt;Welcome to the microphone test service.&lt;/Say&gt;\n</code></pre> <p>Available voice options include: - <code>man</code> (default) - <code>woman</code> - <code>alice</code> (enhanced voice)</p>"},{"location":"getting-started/configuration/#language-settings","title":"Language Settings","text":"<p>To change the language, add a <code>language</code> attribute to the <code>&lt;Say&gt;</code> elements:</p> <pre><code>&lt;Say language=\"en-GB\"&gt;Welcome to the microphone test service.&lt;/Say&gt;\n</code></pre> <p>See Twilio's documentation for a list of supported languages.</p>"},{"location":"getting-started/configuration/#security-considerations","title":"Security Considerations","text":"<ul> <li>Keep your <code>.env</code> file secure and never commit it to version control</li> <li>If deploying to a public environment, ensure you have appropriate firewalls and rate limiting in place</li> <li>Consider implementing authentication for any administrative endpoints you add</li> </ul>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>This guide will walk you through setting up the Twilio Microphone Test App on your local system and preparing it for deployment.</p>"},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, make sure you have the following installed:</p> <ul> <li>Go (version 1.21 or higher)</li> <li>Git</li> <li>A Twilio account with a phone number</li> <li>Docker (optional, for containerization)</li> <li>ngrok or similar tool for local development</li> </ul>"},{"location":"getting-started/installation/#local-installation","title":"Local Installation","text":"<ol> <li>Clone the repository:</li> </ol> <pre><code>git clone https://github.com/yourusername/twilio-mic-test.git\ncd twilio-mic-test\n</code></pre> <ol> <li>Create a <code>.env</code> file based on the example:</li> </ol> <pre><code>cp .env.example .env\n</code></pre> <ol> <li>Edit the <code>.env</code> file and add your Twilio credentials:</li> </ol> <pre><code>TWILIO_ACCOUNT_SID=your_account_sid_here\nTWILIO_AUTH_TOKEN=your_auth_token_here\nTWILIO_PHONE_NUMBER=your_twilio_phone_number_here\nPORT=8080\nAPP_ENV=development\n</code></pre> <ol> <li>Download the Go dependencies:</li> </ol> <pre><code>go mod download\n</code></pre> <ol> <li>Run the application:</li> </ol> <pre><code>go run main.go\n</code></pre> <p>You should see output indicating that the server is starting on port 8080 (or whatever port you specified in your <code>.env</code> file).</p>"},{"location":"getting-started/installation/#making-your-local-server-accessible","title":"Making Your Local Server Accessible","text":"<p>To test with Twilio, your application needs to be accessible over the internet. You can use ngrok to create a secure tunnel to your local server:</p> <ol> <li>Start ngrok on the same port as your application:</li> </ol> <pre><code>ngrok http 8080\n</code></pre> <ol> <li> <p>Note the HTTPS URL provided by ngrok (e.g., <code>https://abc123.ngrok.io</code>).</p> </li> <li> <p>Configure your Twilio phone number to use this URL for voice webhooks, as detailed in the Twilio Setup Guide.</p> </li> </ol>"},{"location":"getting-started/installation/#running-with-docker","title":"Running with Docker","text":"<p>If you prefer to use Docker:</p> <ol> <li>Build the Docker image:</li> </ol> <pre><code>docker build -t twilio-mic-test .\n</code></pre> <ol> <li>Run the container:</li> </ol> <pre><code>docker run -p 8080:8080 --env-file .env twilio-mic-test\n</code></pre>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<p>After installation, proceed to the Configuration Guide to customize your application.</p>"}]}